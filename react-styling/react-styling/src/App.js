import logo from './logo.svg';
// ------------------------EXTERNAL STYLE SHEETS:--------------------------------------------
// here, we import a CSS file, and then use the class name to style our div.
import './App.css';

// --------------------------------------SASS------------------------------------------------
// Here, we import a SASS file, and then use the class name to style our div.
import './App.scss';

// ------------------------------------MODULES-----------------------------------------------
// Import my CSS module (I can name it whatever I want, but I should name it something that makes sense)
import someStyles from './Module.module.css';
// {red: 'Module_red__I8kKO'} is the object that is returned when we import our CSS module.
// ------------------------------------------------------------------------------------------

// In order to use state, we have to import it from the react library.
import {useState} from 'react';

// CSS IS NOT SCOPED TO COMPONENTS BY DEFAULT!!!
// This component is changing the background color of the entire page. 
// EVEN THOUGH WE ARENT EVEN RENDERING IT!
// Just by importing this component, we are basically importing the CSS file, and it is being applied to the entire page.
// import MyComponent from './MyComponent';

// initialDarkMode is just a boolean prop that we are passing to our App component from index.js
function App({initialDarkMode}) {

  console.log(someStyles)

  // state for dark mode toggling:
  const [darkMode, setDarkMode] = useState(initialDarkMode);

  // function to toggle dark mode and re-render the component:
  const toggleMode = () => {
    // remember when we use our setter, we are updating the state, and then re-rendering the component.
    // NEVER CHANGE STATE DIRECTLY. ALWAYS USE THE SETTER FUNCTION otherwise the component won't re-render.
   setDarkMode(!darkMode);
  }


  // When styling in Javascript or React, we use camelCase for the CSS properties.
  // -----------------------------------INLINE STYLES------------------------------------------
  const styles = {
    // values need to be strings if they are not numbers
    // if values are numbers, but include a unit, they need to be strings
    width: '500', // This is a number, and is therefore assumed to be pixels
    height: '200px',
    // conditional styling:
    backgroundColor: darkMode? 'black' : 'white',
    // if we want to use JS values, we have to use template literals 
    // because we need to use strings as values.
    boxShadow: `0 0 ${'10px'} ${'black'}`
  }

  const stylesObj = {
    h3:{
      color: darkMode? 'white' : 'black',
      fontSize: '24px'
    }, 
    p: {
      color: darkMode? 'white' : 'black',
    }
  }

  const arr = [1, 2, 3, 4, 5];

  return (
    // using an object to style the div:


    <div style={styles}>
      {/* Also using an object to style our div, but notice this is an object literal!
      Because this is an object literal, we see 2 pairs of curly braces. */}
      <h1 style={{ color: darkMode? 'white':'black' }}>Hello!</h1>
      <h3 style={stylesObj.h3}>Using nested objects inside of a main styles object</h3>
      <p className={darkMode?'dark':'light'}>This is a paragraph</p>

      {/* using CSS modules: */}
      {/* 
        Here, we're using a class that was defined in our CSS module.
        to apply the className, we use the dot operator, and then the name of the class.
        This is because we are creating an object when we import the CSS module.
        The object has properties that are the names of the classes, 
        and the values are the unique names that were generated by create-react-app.

      */}
      <p className={someStyles.red}>This is a red paragraph</p>
      {
        /*
          Below is just an example of how in JSX, we can ONLY use expressions, not statements.

          an expression is something that evaluates to a value.

          a statement is something that does something, but does not evaluate to a value.
          for example, for loops, while loops, if statements, etc. are all statements.
        */

        // We can not use a variable declaration here, but we can use a variable assignment.
        //**  This is because in JSX, we can only use expressions, not statements.
        // This is why we can use the map function, but we can't use a for loop.
        // We can use a variable assignment, because that is an expression.

        // a for loop is a statement, and therefore can not be used in JSX.
        // for(let i = 0; i < arr.length; i++) {
        //   return <p>{arr[i]}</p>
        // }

        // let something = 5;
        // Array.map is an expression, and therefore can be used in JSX.
        // arr.map((num, i) => {
        //   return <p key={i}>{num}</p>
        // })
      }

      {/* using SCSS classes: */}
      <button className="btn" onClick={toggleMode}>Toggle Mode</button>
    </div>
  );
}

export default App;
